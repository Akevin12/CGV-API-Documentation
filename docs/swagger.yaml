definitions:
  models.Branch:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.Chart:
    properties:
      id:
        type: integer
      menu:
        type: string
      price:
        type: string
      quantity:
        type: integer
    type: object
  models.ChartResponse:
    properties:
      data:
        $ref: '#/definitions/models.Chart'
      message:
        type: string
      status:
        type: integer
    type: object
  models.Customer:
    properties:
      address:
        type: string
      birthday:
        type: string
      email:
        type: string
      gender:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  models.CustomerEdit:
    properties:
      address:
        type: string
      gender:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.CustomerResponse:
    properties:
      data:
        $ref: '#/definitions/models.Customer'
      message:
        type: string
      status:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Member:
    properties:
      benefit:
        type: string
      currentLevel:
        type: integer
      id:
        type: integer
      points:
        type: string
      spend:
        type: string
      typeMember:
        type: string
    type: object
  models.MemberResponse:
    properties:
      data:
        $ref: '#/definitions/models.Member'
      message:
        type: string
      status:
        type: integer
    type: object
  models.Movie:
    properties:
      Date:
        type: string
      age:
        type: integer
      description:
        type: string
      duration:
        type: integer
      id:
        type: integer
      review:
        $ref: '#/definitions/models.Review'
      title:
        type: string
    type: object
  models.MovieSchedule:
    properties:
      data:
        $ref: '#/definitions/models.Schedule'
    type: object
  models.MovieScheduleResponse:
    properties:
      data:
        $ref: '#/definitions/models.Schedule'
      message:
        type: string
      status:
        type: integer
    type: object
  models.MovieSchedulesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Schedule'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.MoviesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.PassResponse:
    properties:
      data:
        $ref: '#/definitions/models.Password'
      message:
        type: string
      status:
        type: integer
    type: object
  models.Password:
    properties:
      confirm password:
        type: string
      current password:
        type: string
      id:
        type: integer
      new password:
        type: string
    type: object
  models.Payment:
    properties:
      amount:
        type: number
      id:
        type: integer
      status:
        $ref: '#/definitions/models.PaymentStatus'
    type: object
  models.PaymentStatus:
    enum:
    - pending
    - completed
    - failed
    type: string
    x-enum-varnames:
    - Pending
    - Completed
    - Failed
  models.Response:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  models.Review:
    properties:
      Rating:
        type: number
      TotalReview:
        type: integer
    type: object
  models.Schedule:
    properties:
      branch:
        $ref: '#/definitions/models.Branch'
      id:
        type: integer
      movie:
        $ref: '#/definitions/models.Movie'
      price:
        type: number
      seats:
        items:
          $ref: '#/definitions/models.Seat'
        type: array
      showtime:
        type: string
    type: object
  models.ScheduleTicket:
    properties:
      branch:
        $ref: '#/definitions/models.Branch'
      id:
        type: integer
      movie:
        $ref: '#/definitions/models.Movie'
      price:
        type: number
      seat:
        $ref: '#/definitions/models.Seat'
      showtime:
        type: string
    type: object
  models.Seat:
    properties:
      availability:
        type: boolean
      id:
        type: integer
      number:
        type: string
      row:
        type: string
    type: object
  models.Ticket:
    properties:
      id:
        type: integer
      payment:
        $ref: '#/definitions/models.Payment'
      schedule:
        $ref: '#/definitions/models.ScheduleTicket'
      seat:
        $ref: '#/definitions/models.Seat'
    type: object
  models.TicketResponse:
    properties:
      data:
        $ref: '#/definitions/models.Ticket'
      message:
        type: string
      status:
        type: integer
    type: object
  models.TicketsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth/logout:
    delete:
      description: Logout Account admin and customer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Logout Account
      tags:
      - Auth
  /customer/{customerId}/chart:
    delete:
      consumes:
      - application/json
      description: Delete Chart
      parameters:
      - description: Chart ID
        in: path
        name: ChartId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete Chart
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Add To Chart
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Chart details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Chart'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ChartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add To Chart
      tags:
      - Customer
    put:
      consumes:
      - application/json
      description: Update Chart
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Chart details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Chart'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ChartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update Chart
      tags:
      - Customer
  /customer/{customerId}/member:
    get:
      consumes:
      - application/json
      description: Get Member
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Member
      tags:
      - Customer
  /customer/{customerId}/password:
    put:
      consumes:
      - application/json
      description: Put Password
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Password details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Password'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PassResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update Password
      tags:
      - Customer
  /customer/{customerId}/profile:
    get:
      consumes:
      - application/json
      description: get Account
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Customer
      tags:
      - Customer
    put:
      consumes:
      - application/json
      description: Put Customer Account
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Customer details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CustomerEdit'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update Customer
      tags:
      - Customer
  /customer/{customerId}/tickets:
    get:
      consumes:
      - application/json
      description: Get all payments
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Payments
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Create Ticket by shedule
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Schedule Detail
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ScheduleTicket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create Ticket
      tags:
      - Customer
  /customer/{customerId}/tickets/{ticketId}:
    get:
      consumes:
      - application/json
      description: Get payment
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Customer ID
        in: path
        name: ticketId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Payment
      tags:
      - Customer
  /customer/{customerId}/tickets/{ticketId}/payment:
    post:
      consumes:
      - application/json
      description: Confirm payment with payment_id.
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: payment id
        in: path
        name: ticketId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Confirm Payment
      tags:
      - Customer
  /customer/{customerId}/wishlist:
    delete:
      consumes:
      - application/json
      description: Delete Wishlist
      parameters:
      - description: Wishlist ID
        in: path
        name: WishlistId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete Wishlist
      tags:
      - Customer
    get:
      consumes:
      - application/json
      description: Get Wishlist
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MovieSchedulesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Wishlist
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Add Wishlist
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Whislist details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.MovieSchedule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MovieSchedulesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add Wishlist
      tags:
      - Customer
  /customer/auth/login:
    post:
      consumes:
      - application/json
      description: Login Customer Account
      parameters:
      - description: Login details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login Customer
      tags:
      - Auth
  /customer/registration:
    post:
      consumes:
      - application/json
      description: Create New Customer Account
      parameters:
      - description: Customer details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create New Customer
      tags:
      - Customer
  /movies/{movieId}/schedules:
    get:
      consumes:
      - application/json
      description: Get a schedule by movie_id and schedule_id.
      parameters:
      - description: movie id
        in: path
        name: movieId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MovieSchedulesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Schedule
      tags:
      - Customer
  /movies/{movieId}/schedules/{scheduleId}:
    get:
      consumes:
      - application/json
      description: Get all schedules for a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: movieId
        required: true
        type: string
      - description: Schedule ID
        in: path
        name: scheduleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MovieScheduleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all schedules for a movie by ID
      tags:
      - Customer
  /movies/search:
    get:
      consumes:
      - application/json
      description: Search movies by title
      parameters:
      - description: Movie title to search
        in: query
        name: title
        type: string
      - description: Movie genre to search
        in: query
        name: genre
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MoviesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Search movies by title
      tags:
      - Guest
swagger: "2.0"

definitions:
  models.Branch:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.BranchDetail:
    properties:
      address:
        type: string
      id:
        type: integer
      mall access:
        type: string
      name:
        type: string
      operational:
        type: string
      parkingArea:
        type: string
      price:
        type: integer
    type: object
  models.BranchDetailResponse:
    properties:
      data:
        $ref: '#/definitions/models.BranchDetail'
      message:
        type: string
      status:
        type: integer
    type: object
  models.BranchSearch:
    properties:
      distance:
        type: number
      id:
        type: integer
      name:
        type: string
    type: object
  models.BranchSearchResponse:
    properties:
      data:
        $ref: '#/definitions/models.BranchSearch'
      message:
        type: string
      status:
        type: integer
    type: object
  models.Chart:
    properties:
      id:
        type: integer
      menu:
        type: string
      price:
        type: string
      quantity:
        type: integer
    type: object
  models.ChartResponse:
    properties:
      data:
        $ref: '#/definitions/models.Chart'
      message:
        type: string
      status:
        type: integer
    type: object
  models.Coupon:
    properties:
      discount:
        type: number
      expire:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.CouponResponse:
    properties:
      data:
        $ref: '#/definitions/models.Coupon'
      message:
        type: string
      status:
        type: integer
    type: object
  models.Customer:
    properties:
      address:
        type: string
      birthday:
        type: string
      email:
        type: string
      gender:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  models.CustomerEdit:
    properties:
      address:
        type: string
      gender:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.CustomerResponse:
    properties:
      data:
        $ref: '#/definitions/models.Customer'
      message:
        type: string
      status:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  models.Feature:
    properties:
      category:
        type: string
      id:
        type: integer
      link:
        type: string
      picture_path:
        type: string
      title:
        type: string
    type: object
  models.FeaturesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Feature'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Member:
    properties:
      benefit:
        type: string
      currentLevel:
        type: integer
      id:
        type: integer
      points:
        type: string
      spend:
        type: string
      typeMember:
        type: string
    type: object
  models.MemberResponse:
    properties:
      data:
        $ref: '#/definitions/models.Member'
      message:
        type: string
      status:
        type: integer
    type: object
  models.Movie:
    properties:
      Date:
        type: string
      age:
        type: integer
      description:
        type: string
      duration:
        type: integer
      genre:
        type: string
      id:
        type: integer
      review_summary:
        $ref: '#/definitions/models.ReviewSummary'
      title:
        type: string
    type: object
  models.MovieSchedule:
    properties:
      data:
        $ref: '#/definitions/models.Schedule'
    type: object
  models.MovieScheduleResponse:
    properties:
      data:
        $ref: '#/definitions/models.Schedule'
      message:
        type: string
      status:
        type: integer
    type: object
  models.MovieSchedulesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Schedule'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.MoviesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.News:
    properties:
      date:
        type: string
      id:
        type: integer
      link:
        type: string
      picture_path:
        type: string
      title:
        type: string
    type: object
  models.NewsArrayResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.News'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.NowShowingMovies:
    properties:
      age:
        type: integer
      id:
        type: integer
      location:
        type: string
      title:
        type: string
    type: object
  models.NowShowingMoviesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.NowShowingMovies'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.OrderFood:
    properties:
      customer:
        $ref: '#/definitions/models.Customer'
      id:
        type: integer
      menu:
        type: string
      paymentmethod:
        type: string
      price:
        type: string
      quantity:
        type: integer
      voucher:
        type: string
    type: object
  models.OrderFoodResponse:
    properties:
      data:
        $ref: '#/definitions/models.OrderFood'
      message:
        type: string
      status:
        type: integer
    type: object
  models.PassResponse:
    properties:
      data:
        $ref: '#/definitions/models.Password'
      message:
        type: string
      status:
        type: integer
    type: object
  models.Password:
    properties:
      confirm password:
        type: string
      current password:
        type: string
      id:
        type: integer
      new password:
        type: string
    type: object
  models.Payment:
    properties:
      amount:
        type: number
      id:
        type: integer
      status:
        $ref: '#/definitions/models.PaymentStatus'
    type: object
  models.PaymentStatus:
    enum:
    - pending
    - completed
    - failed
    type: string
    x-enum-varnames:
    - Pending
    - Completed
    - Failed
  models.Points:
    properties:
      date:
        type: string
      expire:
        type: string
      total:
        type: integer
    type: object
  models.PointsResponse:
    properties:
      data:
        $ref: '#/definitions/models.Points'
      message:
        type: string
      status:
        type: integer
    type: object
  models.Promotion:
    properties:
      category:
        type: string
      date:
        type: string
      id:
        type: integer
      link:
        type: string
      picture_path:
        type: string
      title:
        type: string
    type: object
  models.PromotionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Promotion'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.Response:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  models.Review:
    properties:
      Rating:
        type: integer
      content:
        type: string
      date:
        type: string
      picture_path:
        type: string
      username:
        type: string
    type: object
  models.ReviewForm:
    properties:
      content:
        example: |-
          What's Enjoyable : Story
          What did you feel : Tension
          Comments : Great Movie!
        type: string
      date:
        example: 25/04/2024
        type: string
      rating:
        example: 5
        type: integer
      ticket_id:
        example: 1
        type: integer
    type: object
  models.ReviewFormBody:
    properties:
      data:
        $ref: '#/definitions/models.ReviewForm'
    type: object
  models.ReviewSummary:
    properties:
      Rating:
        type: number
      TotalReview:
        type: integer
    type: object
  models.ReviewsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.Schedule:
    properties:
      branch:
        $ref: '#/definitions/models.Branch'
      id:
        type: integer
      movie:
        $ref: '#/definitions/models.Movie'
      price:
        type: number
      seats:
        items:
          $ref: '#/definitions/models.Seat'
        type: array
      showtime:
        type: string
    type: object
  models.ScheduleTicket:
    properties:
      branch:
        $ref: '#/definitions/models.Branch'
      id:
        type: integer
      movie:
        $ref: '#/definitions/models.Movie'
      price:
        type: number
      seat:
        $ref: '#/definitions/models.Seat'
      showtime:
        type: string
    type: object
  models.Seat:
    properties:
      availability:
        type: boolean
      id:
        type: integer
      number:
        type: string
      row:
        type: string
    type: object
  models.Ticket:
    properties:
      id:
        type: integer
      payment:
        $ref: '#/definitions/models.Payment'
      schedule:
        $ref: '#/definitions/models.ScheduleTicket'
      seat:
        $ref: '#/definitions/models.Seat'
    type: object
  models.TicketResponse:
    properties:
      data:
        $ref: '#/definitions/models.Ticket'
      message:
        type: string
      status:
        type: integer
    type: object
  models.TicketsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.UpComingMovies:
    properties:
      age:
        type: integer
      id:
        type: integer
      likes:
        type: integer
      location:
        type: string
      title:
        type: string
    type: object
  models.UpComingMoviesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.UpComingMovies'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.Voucher:
    properties:
      customer:
        $ref: '#/definitions/models.Customer'
      description:
        type: string
      expiredDate:
        type: string
      vouchername:
        type: string
    type: object
  models.VoucherResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Voucher'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login Account
      parameters:
      - description: Login details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login Account
      tags:
      - Auth
  /auth/logout:
    delete:
      description: Logout Account admin and customer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Logout Account
      tags:
      - Auth
  /branch/search:
    get:
      consumes:
      - application/json
      description: Search cinema
      parameters:
      - description: Cinema name to search
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchSearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Search cinema
      tags:
      - Guest
  /customer/{customerId}/cancelorderfood:
    delete:
      consumes:
      - application/json
      description: Cancel Order Food
      parameters:
      - description: Customer ID
        in: path
        name: customerID
        required: true
        type: integer
      - description: Order ID
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Cancel Order Food
      tags:
      - Customer
  /customer/{customerId}/chart:
    get:
      consumes:
      - application/json
      description: Get Chart
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ChartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Chart
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Add To Chart
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Chart details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Chart'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ChartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add To Chart
      tags:
      - Customer
    put:
      consumes:
      - application/json
      description: Update Chart
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Chart details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Chart'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ChartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update Chart
      tags:
      - Customer
  /customer/{customerId}/chart/{chartId}:
    delete:
      consumes:
      - application/json
      description: Delete Chart
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Chart ID
        in: path
        name: ChartId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete Chart
      tags:
      - Customer
  /customer/{customerId}/coupon:
    get:
      consumes:
      - application/json
      description: get All Coupon
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CouponResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get All Coupon
      tags:
      - Customer
  /customer/{customerId}/favorite:
    delete:
      consumes:
      - application/json
      description: Delete Favorite
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete Favorite
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Add To Favorite
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Branch details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.BranchDetail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BranchDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add To Favorite
      tags:
      - Customer
  /customer/{customerId}/foodvoucher:
    get:
      consumes:
      - application/json
      description: Get Food Voucher
      parameters:
      - description: Name
        in: path
        name: voucherName
        required: true
        type: string
      - description: Customer ID
        in: path
        name: customerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VoucherResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Food Voucher
      tags:
      - Customer
  /customer/{customerId}/member:
    get:
      consumes:
      - application/json
      description: Get Member
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MemberResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Member
      tags:
      - Customer
  /customer/{customerId}/movie/review:
    post:
      consumes:
      - application/json
      description: Add Review
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Review details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ReviewFormBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: 'Error : Couldn''t add review!'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add Review
      tags:
      - Customer
  /customer/{customerId}/orderfood:
    post:
      consumes:
      - application/json
      description: Create Order Food
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrderFoodResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create Order Food
      tags:
      - Customer
  /customer/{customerId}/password:
    put:
      consumes:
      - application/json
      description: Put Password
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Password details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Password'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PassResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update Password
      tags:
      - Customer
  /customer/{customerId}/points:
    get:
      consumes:
      - application/json
      description: Get Points History
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PointsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Points History
      tags:
      - Customer
  /customer/{customerId}/profile:
    get:
      consumes:
      - application/json
      description: get Account
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Customer
      tags:
      - Customer
    put:
      consumes:
      - application/json
      description: Put Customer Account
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Customer details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CustomerEdit'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update Customer
      tags:
      - Customer
  /customer/{customerId}/tickets:
    get:
      consumes:
      - application/json
      description: Get ticket
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Ticket
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Create Ticket by shedule
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Schedule Detail
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ScheduleTicket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create Ticket
      tags:
      - Customer
  /customer/{customerId}/tickets/{ticketId}:
    get:
      consumes:
      - application/json
      description: Get payment
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Customer ID
        in: path
        name: ticketId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Payment
      tags:
      - Customer
  /customer/{customerId}/tickets/{ticketId}/payment:
    post:
      consumes:
      - application/json
      description: Confirm payment with payment_id.
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: payment id
        in: path
        name: ticketId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Confirm Payment
      tags:
      - Customer
  /customer/{customerId}/watchlist:
    get:
      consumes:
      - application/json
      description: Get Watchlist
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MovieSchedulesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Watchlist
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Add Watchlist
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Watchlist details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.MovieSchedule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MovieSchedulesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add Watchlist
      tags:
      - Customer
  /customer/{customerId}/watchlist/{watchlistId}:
    delete:
      consumes:
      - application/json
      description: Delete Watchlist
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      - description: Watchlist ID
        in: path
        name: WatchlistId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete Watchlist
      tags:
      - Customer
  /customer/registration:
    post:
      consumes:
      - application/json
      description: Create New Customer Account
      parameters:
      - description: Customer details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create New Customer
      tags:
      - Customer
  /information/features:
    get:
      consumes:
      - application/json
      description: Get All Features
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FeaturesResponse'
        "400":
          description: 'Error : Couldn''t get Features!'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get All Features
      tags:
      - Guest
  /information/news:
    get:
      consumes:
      - application/json
      description: Get all news
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NewsArrayResponse'
        "400":
          description: 'Error : Couldn''t get all news!'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all news
      tags:
      - Guest
  /information/promotions:
    get:
      consumes:
      - application/json
      description: Get All Promotions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PromotionsResponse'
        "400":
          description: 'Error : Couldn''t get promotions!'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get All Promotions
      tags:
      - Guest
  /movie/reviews/{movieId}:
    get:
      consumes:
      - application/json
      description: Get All Reviews
      parameters:
      - description: Movie ID
        in: path
        name: movieId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReviewsResponse'
        "400":
          description: 'Error : Couldn''t get reviews!'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get All Reviews
      tags:
      - Guest
  /movies/{movieId}/schedules/{scheduleId}:
    get:
      consumes:
      - application/json
      description: Get all schedules for a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: movieId
        required: true
        type: string
      - description: Schedule ID
        in: path
        name: scheduleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MovieScheduleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all schedules for a movie by ID
      tags:
      - Customer
  /movies/nowshowing:
    get:
      consumes:
      - application/json
      description: Get Now Showing Movies
      parameters:
      - description: Now Showing Movies
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.NowShowingMovies'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NowShowingMoviesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Now Showing Movies
      tags:
      - Guest
  /movies/search:
    get:
      consumes:
      - application/json
      description: Search movies by title
      parameters:
      - description: Movie title to search
        in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MoviesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Search movies by title
      tags:
      - Guest
  /movies/upcoming:
    get:
      consumes:
      - application/json
      description: Get Upcoming Movies
      parameters:
      - description: Upcoming Movies
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpComingMovies'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpComingMoviesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Upcoming Movies
      tags:
      - Guest
swagger: "2.0"
